name: deployment

on: 
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'
        
      - name: Run tests
        run: go test -v ./...

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV }}" > .env
          echo "Created .env file:"
          cat .env

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru .

      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    env:
        IMAGE_URI: '${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru'
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Create PEM file from secret
      run: |
        echo "${{ secrets.EC2_PEM }}" > ec2-key.pem
        chmod 600 ec2-key.pem

    - name: Copy .env to EC2
      run: |
        echo "Copying .env to EC2..."
        scp -i ec2-key.pem -o StrictHostKeyChecking=no .env $EC2_USER@$EC2_HOST:/home/$EC2_USER/.env
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "ls -la /home/$EC2_USER/.env && cat /home/$EC2_USER/.env"

    - name: Deploy to EC2
      run: |
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
          if sudo docker ps -a --filter "name=my-project-mini-golang" | grep my-project-mini-golang; then
            echo "Stopping and removing old container..."
            sudo docker stop my-project-mini-golang
            sudo docker rm my-project-mini-golang
          fi

          echo "Pulling latest image..."
          sudo docker pull $IMAGE_URI

          echo "Running new container..."
          sudo docker run -d --name my-project-mini-golang --env-file /home/$EC2_USER/.env -p 8000:8000 $IMAGE_URI
        EOF

    - name: Clean up PEM file
      run: rm -f ec2-key.pem
