name: deployment

on: 
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v2
        
      # Setup Go environment
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'
        
      # Run tests
      - name: Run tests
        run: go test -v ./...

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v2

      # Create .env file from secret
      - name: Create .env file
        run: echo "${{ secrets.ENV }}" >> .env

      # Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru .

      # Login to Docker Hub
      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    env:
        IMAGE_URI: '${{ secrets.DOCKER_USER }}/project_mini_golang:terbaru'
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
    steps:
    # Checkout the code (optional, for consistency)
    - name: Check out the code
      uses: actions/checkout@v2

    # Create PEM file from secret
    - name: Create PEM file from secret
      run: |
        echo "${{ secrets.EC2_PEM }}" > ec2-key.pem
        chmod 600 ec2-key.pem  # Set appropriate permissions

    # Deploy to EC2
    - name: Deploy to EC2
      run: |
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
          # Check for existing container
          echo "Checking for existing container..."
          if [ \$(docker ps -aq --filter "name=my-project-mini-golang") ]; then
            echo "Stopping and removing existing container..."
            docker stop my-project-mini-golang && docker rm my-project-mini-golang
          fi

          # Pull the latest image
          echo "Pulling latest image: $IMAGE_URI"
          docker pull $IMAGE_URI

          # Run the new container
          echo "Running the new container..."
          docker run -d --name my-project-mini-golang -p 8000:8000 $IMAGE_URI

          echo "Deployment successful."
        EOF

    # Clean up PEM file
    - name: Clean up PEM file
      run: rm -f ec2-key.pem
